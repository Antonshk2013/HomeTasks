"""06 ======================================================
Напишите функцию, которая получает на вход три слова и определяет,
являются ли они анаграммами друг друга.
Использовать множества.
Важное ограничение: известно, что буквы в пределах одного слова не повторяются.
Функция возвращает:
 - True, если слова являются анаграммами и
 - False в противном случае.

Пример:
is_anagram(“кластер”, “стрелка”, “сталкер”) = True.
"""


def is_anagram(word1, word2, word3):
    return set(word1) == set(word2) and set(word3) == set(word1)



print(is_anagram("кластер", "стрелка", "сталкер"))   # True

print(is_anagram("вольер", "собака", "пример"))  # False


"""07 =====================================================
На входе функция to_set() получает строку или список чисел.
Преобразуйте их в множество.
На выходе должно получиться множество и его мощность (cardinality).
"""


def to_set(seq: list | str) -> tuple[set, int]:
    return set(seq), len(seq)



print(to_set([1, 2, 3, 4, 5]))   # ({1, 2, 3, 4, 5}, 5)
print(to_set("cardinality"))   # ({'y', 'r', 'a', 'c', 'i', 't', 'l', 'd', 'n'}, 9)


"""08 ==========================================
Предоставлен список натуральных чисел.
Требуется сформировать из них множество.
Если какое-либо число повторяется, то преобразовать его в строку по образцу:
например, если число 4 повторяется 3 раза, то в множестве будет следующая запись:
    - само число 4;
    - строка 44 (второе повторение, т.е. число дублируется в строке);
    - строка 444 (третье повторение, т.е. строка множится на 3).

Реализуйте вывод множества через функцию set_gen().
"""


def set_gen(nums: list[int]) -> set:
    return [i if nums.count(i) == 1 else str(i) * nums.count(i) for i in nums]

print(set_gen([1, 1, 1, 2, 2, 3]))   # {1, 2, 3, '111', '22', '11'}

print(set_gen([1, 1, 1, 2, 2, 3]) == {1, 2, 3, '111', '22', '11'})


"""09 ==========================================
Напишите функцию, которая получает на вход
    две строки с перечислением интересов и хобби двух пользователей, и
    вычисляет процент совпадения.

Процент рассчитывается, как отношение числа совпадений к максимальному числу интересов
ОДНОГО ИЗ участников.
(например: у 1-го - 3 хобби, у 2-го - 4 хобби
=> max будет равен 4)

Использовать множества.
"""


def match_percentage(interests_1: str, interests_2: str) -> float:
    pass


user1_interests = "путешествия, фотография, кино, музыка"
user2_interests = "фотография, кино, литература, спорт"

result = match_percentage(user1_interests, user2_interests)
print(f"Процент совпадения интересов: {result:.2f} %")
# Процент совпадения интересов: 25.00 %